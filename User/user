# Open a terminal.
# Connect to PostgreSQL as a superuser (usually postgres):

sudo -u postgres psql

# Run the following SQL command to create a user:

CREATE USER username WITH PASSWORD 'your_password';
# Replace username and your_password with the desired username and password.

# Optionally, to grant the user superuser privileges:
ALTER USER username WITH SUPERUSER;

#To exit psql, type:
\q  

# To list all users (roles) in PostgreSQL, connect to your database using psql and run:
\du
SELECT usename FROM pg_user;
# This will display a list of all roles along with their attributes.
# Replace username with the name of the user you want to modify.

# To modify an existing user, you can use the ALTER USER command. For example, to change a user's password:
ALTER USER username WITH PASSWORD 'new_password';
# Replace username with the name of the user you want to modify and new_password with the new password. 
# To delete a user, use the DROP USER command:
DROP USER username;
# Replace username with the name of the user you want to delete.
# Note: You cannot drop a user that owns database objects. You must first reassign or drop those objects.
# To delete a user, use the DROP USER command:
DROP USER username;
# Replace username with the name of the user you want to delete.
# Note: You cannot drop a user that owns database objects. You must first reassign or drop those objects.
# To exit psql, type:
\q  

To change the owner of a table in PostgreSQL, use the following SQL command:
ALTER TABLE table_name OWNER TO new_owner;
# Replace table_name with the name of the table and new_owner with the username of the new owner.
# To change the owner of a database in PostgreSQL, use the following SQL command:
ALTER DATABASE database_name OWNER TO new_owner;
# Replace database_name with the name of the database and new_owner with the username of the new owner.
# To change the owner of a schema in PostgreSQL, use the following SQL command:
ALTER SCHEMA schema_name OWNER TO new_owner;
# Replace schema_name with the name of the schema and new_owner with the username of the new owner.
# To change the owner of a sequence in PostgreSQL, use the following SQL command:
ALTER SEQUENCE sequence_name OWNER TO new_owner;
# Replace sequence_name with the name of the sequence and new_owner with the username of the new owner.
# To change the owner of a view in PostgreSQL, use the following SQL command:
ALTER VIEW view_name OWNER TO new_owner;
# Replace view_name with the name of the view and new_owner with the username of the new owner.
# To change the owner of a function in PostgreSQL, use the following SQL command:
ALTER FUNCTION function_name(arguments) OWNER TO new_owner;
# Replace function_name with the name of the function, arguments with the function's argument types, and new_owner with the username of the new owner.
# To change the owner of a type in PostgreSQL, use the following SQL command:
ALTER TYPE type_name OWNER TO new_owner;
# Replace type_name with the name of the type and new_owner with the username of the new owner.
# To change the owner of a foreign table in PostgreSQL, use the following SQL command:
ALTER FOREIGN TABLE foreign_table_name OWNER TO new_owner;
# Replace foreign_table_name with the name of the foreign table and new_owner with the username of the new owner.
# To change the owner of a materialized view in PostgreSQL, use the following SQL command:
ALTER MATERIALIZED VIEW matview_name OWNER TO new_owner;
# Replace matview_name with the name of the materialized view and new_owner with the username of the new owner.
# To change the owner of a large object in PostgreSQL, use the following SQL command:
ALTER LARGE OBJECT loid OWNER TO new_owner;
# Replace loid with the OID of the large object and new_owner with the username of the new owner.
# To change the owner of a role in PostgreSQL, use the following SQL command:
ALTER ROLE role_name OWNER TO new_owner;
# Replace role_name with the name of the role and new_owner with the username of the new owner.
# To change the owner of a tablespace in PostgreSQL, use the following SQL command:
ALTER TABLESPACE tablespace_name OWNER TO new_owner;
# Replace tablespace_name with the name of the tablespace and new_owner with the username of the new owner.
# To change the owner of a publication in PostgreSQL, use the following SQL command:
ALTER PUBLICATION publication_name OWNER TO new_owner;
# Replace publication_name with the name of the publication and new_owner with the username of the new owner.
# To change the owner of a subscription in PostgreSQL, use the following SQL command:
ALTER SUBSCRIPTION subscription_name OWNER TO new_owner;
# Replace subscription_name with the name of the subscription and new_owner with the username of the new owner.
# To change the owner of a foreign server in PostgreSQL, use the following SQL command:
ALTER SERVER server_name OWNER TO new_owner;
# Replace server_name with the name of the foreign server and new_owner with the username of the new owner.
# To change the owner of a foreign data wrapper in PostgreSQL, use the following SQL command:
ALTER FOREIGN DATA WRAPPER fdw_name OWNER TO new_owner;
# Replace fdw_name with the name of the foreign data wrapper and new_owner with the username of the new owner.
# To change the owner of a collate in PostgreSQL, use the   following SQL command:
ALTER COLLATION collation_name OWNER TO new_owner;
# Replace collation_name with the name of the collation and new_owner with the username of the new owner.
# To change the owner of a conversion in PostgreSQL, use the following SQL command:
ALTER CONVERSION conversion_name OWNER TO new_owner;
# Replace conversion_name with the name of the conversion and new_owner with the username of the new owner.
# To change the owner of a language in PostgreSQL, use the following SQL command:
ALTER LANGUAGE language_name OWNER TO new_owner;
# Replace language_name with the name of the language and new_owner with the username of the new owner.
# To change the owner of a namespace in PostgreSQL, use the following SQL command:
ALTER NAMESPACE namespace_name OWNER TO new_owner;
# Replace namespace_name with the name of the namespace and new_owner with the username of the new owner.
# To change the owner of a policy in PostgreSQL, use the following SQL command:
ALTER POLICY policy_name ON table_name OWNER TO new_owner;
# Replace policy_name with the name of the policy, table_name with the name of the table, and new_owner with the username of the new owner.
# To change the owner of a rule in PostgreSQL, use the following SQL command:
ALTER RULE rule_name ON table_name OWNER TO new_owner;
# Replace rule_name with the name of the rule, table_name with the name of the table, and new_owner with the username of the new owner.
# To change the owner of a trigger in PostgreSQL, use the following SQL command:
ALTER TRIGGER trigger_name ON table_name OWNER TO new_owner;
# Replace trigger_name with the name of the trigger, table_name with the name of the table, and new_owner with the username of the new owner.
# To change the owner of a user mapping in PostgreSQL, use the following SQL command:
ALTER USER MAPPING FOR user_name SERVER server_name OWNER TO new_owner;
# Replace user_name with the name of the user, server_name with the name of the server, and new_owner with the username of the new owner.           
